#!/usr/bin/env node

/**
 * Script de verifica√ß√£o das vari√°veis de ambiente
 * Execute: node check-env.js
 */

import { existsSync, readFileSync } from 'fs';
import { join } from 'path';

const envPath = join(process.cwd(), '.env');
const envExamplePath = join(process.cwd(), '.env.example');

console.log('üîç Verificando configura√ß√£o de vari√°veis de ambiente...\n');

// Verifica se .env existe
if (!existsSync(envPath)) {
  console.error('‚ùå Arquivo .env n√£o encontrado!');
  console.log('\nüí° Solu√ß√£o:');
  console.log('   cp .env.example .env');
  console.log('   # Edite o arquivo .env com suas configura√ß√µes\n');
  process.exit(1);
}

console.log('‚úÖ Arquivo .env encontrado');

// L√™ o conte√∫do do .env
const envContent = readFileSync(envPath, 'utf-8');
const envVars = envContent
  .split('\n')
  .filter(line => line && !line.startsWith('#'))
  .reduce((acc, line) => {
    const [key, ...valueParts] = line.split('=');
    if (key) acc[key.trim()] = valueParts.join('=').trim();
    return acc;
  }, {});

// Verifica vari√°veis obrigat√≥rias
const requiredVars = ['VITE_API_URL', 'VITE_API_TIMEOUT'];
let hasError = false;

console.log('\nüìã Vari√°veis configuradas:');
requiredVars.forEach(varName => {
  const value = envVars[varName];
  if (!value) {
    console.log(`   ‚ùå ${varName}: N√ÉO CONFIGURADA`);
    hasError = true;
  } else {
    console.log(`   ‚úÖ ${varName}: ${value}`);
  }
});

if (hasError) {
  console.log('\nüí° Configure as vari√°veis faltantes no arquivo .env');
  process.exit(1);
}

// Verifica se a URL da API √© v√°lida
const apiUrl = envVars.VITE_API_URL;
try {
  new URL(apiUrl);
  console.log(`\n‚úÖ URL da API √© v√°lida: ${apiUrl}`);
} catch (error) {
  console.log(`\n‚ö†Ô∏è  URL da API pode estar inv√°lida: ${apiUrl}`);
}

console.log('\n‚úÖ Configura√ß√£o parece correta!');
console.log(
  '\n‚ö†Ô∏è  LEMBRE-SE: Se voc√™ modificou o .env, reinicie o servidor Vite!'
);
console.log('   1. Pressione Ctrl+C no terminal do Vite');
console.log('   2. Execute: npm run dev\n');
